///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class SomeRootEntityDataResultsEvents {
/*
{
  "available": 0,
  "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/events",
  "items": " []",
  "returned": 0
} 
*/

  int? available;
  String? collectionURI;
  String? items;
  int? returned;

  SomeRootEntityDataResultsEvents({
    this.available,
    this.collectionURI,
    this.items,
    this.returned,
  });
  SomeRootEntityDataResultsEvents.fromJson(Map<String, dynamic> json) {
    available = json['available']?.toInt();
    collectionURI = json['collectionURI']?.toString();
    items = json['items']?.toString();
    returned = json['returned']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['available'] = available;
    data['collectionURI'] = collectionURI;
    data['items'] = items;
    data['returned'] = returned;
    return data;
  }
}

class SomeRootEntityDataResultsStoriesItems {
/*
{
  "resourceURI": "http://gateway.marvel.com/v1/public/stories/183698",
  "name": "cover from Marvel Previews (2017)",
  "type": "cover"
} 
*/

  String? resourceURI;
  String? name;
  String? type;

  SomeRootEntityDataResultsStoriesItems({
    this.resourceURI,
    this.name,
    this.type,
  });
  SomeRootEntityDataResultsStoriesItems.fromJson(Map<String, dynamic> json) {
    resourceURI = json['resourceURI']?.toString();
    name = json['name']?.toString();
    type = json['type']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['resourceURI'] = resourceURI;
    data['name'] = name;
    data['type'] = type;
    return data;
  }
}

class SomeRootEntityDataResultsStories {
/*
{
  "available": 2,
  "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/stories",
  "items": [
    {
      "resourceURI": "http://gateway.marvel.com/v1/public/stories/183698",
      "name": "cover from Marvel Previews (2017)",
      "type": "cover"
    }
  ],
  "returned": 2
} 
*/

  int? available;
  String? collectionURI;
  List<SomeRootEntityDataResultsStoriesItems?>? items;
  int? returned;

  SomeRootEntityDataResultsStories({
    this.available,
    this.collectionURI,
    this.items,
    this.returned,
  });
  SomeRootEntityDataResultsStories.fromJson(Map<String, dynamic> json) {
    available = json['available']?.toInt();
    collectionURI = json['collectionURI']?.toString();
    if (json['items'] != null) {
      final v = json['items'];
      final arr0 = <SomeRootEntityDataResultsStoriesItems>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResultsStoriesItems.fromJson(v));
      });
      items = arr0;
    }
    returned = json['returned']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['available'] = available;
    data['collectionURI'] = collectionURI;
    if (items != null) {
      final v = items;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['items'] = arr0;
    }
    data['returned'] = returned;
    return data;
  }
}

class SomeRootEntityDataResultsCharacters {
/*
{
  "available": 0,
  "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/characters",
  "items": "[]",
  "returned": 0
} 
*/

  int? available;
  String? collectionURI;
  String? items;
  int? returned;

  SomeRootEntityDataResultsCharacters({
    this.available,
    this.collectionURI,
    this.items,
    this.returned,
  });
  SomeRootEntityDataResultsCharacters.fromJson(Map<String, dynamic> json) {
    available = json['available']?.toInt();
    collectionURI = json['collectionURI']?.toString();
    items = json['items']?.toString();
    returned = json['returned']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['available'] = available;
    data['collectionURI'] = collectionURI;
    data['items'] = items;
    data['returned'] = returned;
    return data;
  }
}

class SomeRootEntityDataResultsCreatorsItems {
/*
{
  "resourceURI": "http://gateway.marvel.com/v1/public/creators/10021",
  "name": "Jim Nausedas",
  "role": "editor"
} 
*/

  String? resourceURI;
  String? name;
  String? role;

  SomeRootEntityDataResultsCreatorsItems({
    this.resourceURI,
    this.name,
    this.role,
  });
  SomeRootEntityDataResultsCreatorsItems.fromJson(Map<String, dynamic> json) {
    resourceURI = json['resourceURI']?.toString();
    name = json['name']?.toString();
    role = json['role']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['resourceURI'] = resourceURI;
    data['name'] = name;
    data['role'] = role;
    return data;
  }
}

class SomeRootEntityDataResultsCreators {
/*
{
  "available": 1,
  "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/creators",
  "items": [
    {
      "resourceURI": "http://gateway.marvel.com/v1/public/creators/10021",
      "name": "Jim Nausedas",
      "role": "editor"
    }
  ],
  "returned": 1
} 
*/

  int? available;
  String? collectionURI;
  List<SomeRootEntityDataResultsCreatorsItems?>? items;
  int? returned;

  SomeRootEntityDataResultsCreators({
    this.available,
    this.collectionURI,
    this.items,
    this.returned,
  });
  SomeRootEntityDataResultsCreators.fromJson(Map<String, dynamic> json) {
    available = json['available']?.toInt();
    collectionURI = json['collectionURI']?.toString();
    if (json['items'] != null) {
      final v = json['items'];
      final arr0 = <SomeRootEntityDataResultsCreatorsItems>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResultsCreatorsItems.fromJson(v));
      });
      items = arr0;
    }
    returned = json['returned']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['available'] = available;
    data['collectionURI'] = collectionURI;
    if (items != null) {
      final v = items;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['items'] = arr0;
    }
    data['returned'] = returned;
    return data;
  }
}

class SomeRootEntityDataResultsThumbnail {
/*
{
  "path": "http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available",
  "extension": "jpg"
} 
*/

  String? path;
  String? extension;

  SomeRootEntityDataResultsThumbnail({
    this.path,
    this.extension,
  });
  SomeRootEntityDataResultsThumbnail.fromJson(Map<String, dynamic> json) {
    path = json['path']?.toString();
    extension = json['extension']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['path'] = path;
    data['extension'] = extension;
    return data;
  }
}

class SomeRootEntityDataResultsPrices {
/*
{
  "type": "printPrice",
  "price": 0
} 
*/

  String? type;
  int? price;

  SomeRootEntityDataResultsPrices({
    this.type,
    this.price,
  });
  SomeRootEntityDataResultsPrices.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    price = json['price']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['price'] = price;
    return data;
  }
}

class SomeRootEntityDataResultsDates {
/*
{
  "type": "onsaleDate",
  "date": "2099-10-30T00:00:00-0500"
} 
*/

  String? type;
  String? date;

  SomeRootEntityDataResultsDates({
    this.type,
    this.date,
  });
  SomeRootEntityDataResultsDates.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    date = json['date']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['date'] = date;
    return data;
  }
}

class SomeRootEntityDataResultsVariants {
/*
{
  "resourceURI": "http://gateway.marvel.com/v1/public/comics/82965",
  "name": "Marvel Previews (2017)"
} 
*/

  String? resourceURI;
  String? name;

  SomeRootEntityDataResultsVariants({
    this.resourceURI,
    this.name,
  });
  SomeRootEntityDataResultsVariants.fromJson(Map<String, dynamic> json) {
    resourceURI = json['resourceURI']?.toString();
    name = json['name']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['resourceURI'] = resourceURI;
    data['name'] = name;
    return data;
  }
}

class SomeRootEntityDataResultsSeries {
/*
{
  "resourceURI": "http://gateway.marvel.com/v1/public/series/23665",
  "name": "Marvel Previews (2017 - Present)"
} 
*/

  String? resourceURI;
  String? name;

  SomeRootEntityDataResultsSeries({
    this.resourceURI,
    this.name,
  });
  SomeRootEntityDataResultsSeries.fromJson(Map<String, dynamic> json) {
    resourceURI = json['resourceURI']?.toString();
    name = json['name']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['resourceURI'] = resourceURI;
    data['name'] = name;
    return data;
  }
}

class SomeRootEntityDataResultsUrls {
/*
{
  "type": "detail",
  "url": "http://marvel.com/comics/issue/82967/marvel_previews_2017?utm_campaign=apiRef&utm_source=edc015b686b72ca236f9a3a730613076"
} 
*/

  String? type;
  String? url;

  SomeRootEntityDataResultsUrls({
    this.type,
    this.url,
  });
  SomeRootEntityDataResultsUrls.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['url'] = url;
    return data;
  }
}

class SomeRootEntityDataResults {
/*
{
  "id": 82967,
  "digitalId": 0,
  "title": "Marvel Previews (2017)",
  "issueNumber": 0,
  "variantDescription": "",
  "description": "",
  "modified": "2019-11-07T08:46:15-0500",
  "isbn": "",
  "upc": "75960608839302811",
  "diamondCode": "",
  "ean": "",
  "issn": "",
  "format": "",
  "pageCount": 112,
  "textObjects": "[]",
  "resourceURI": "http://gateway.marvel.com/v1/public/comics/82967",
  "urls": [
    {
      "type": "detail",
      "url": "http://marvel.com/comics/issue/82967/marvel_previews_2017?utm_campaign=apiRef&utm_source=edc015b686b72ca236f9a3a730613076"
    }
  ],
  "series": {
    "resourceURI": "http://gateway.marvel.com/v1/public/series/23665",
    "name": "Marvel Previews (2017 - Present)"
  },
  "variants": [
    {
      "resourceURI": "http://gateway.marvel.com/v1/public/comics/82965",
      "name": "Marvel Previews (2017)"
    }
  ],
  "collections": "[]",
  "collectedIssues": "[]",
  "dates": [
    {
      "type": "onsaleDate",
      "date": "2099-10-30T00:00:00-0500"
    }
  ],
  "prices": [
    {
      "type": "printPrice",
      "price": 0
    }
  ],
  "thumbnail": {
    "path": "http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available",
    "extension": "jpg"
  },
  "images": "[]",
  "creators": {
    "available": 1,
    "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/creators",
    "items": [
      {
        "resourceURI": "http://gateway.marvel.com/v1/public/creators/10021",
        "name": "Jim Nausedas",
        "role": "editor"
      }
    ],
    "returned": 1
  },
  "characters": {
    "available": 0,
    "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/characters",
    "items": "[]",
    "returned": 0
  },
  "stories": {
    "available": 2,
    "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/stories",
    "items": [
      {
        "resourceURI": "http://gateway.marvel.com/v1/public/stories/183698",
        "name": "cover from Marvel Previews (2017)",
        "type": "cover"
      }
    ],
    "returned": 2
  },
  "events": {
    "available": 0,
    "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/events",
    "items": " []",
    "returned": 0
  }
} 
*/

  int? id;
  int? digitalId;
  String? title;
  int? issueNumber;
  String? variantDescription;
  String? description;
  String? modified;
  String? isbn;
  String? upc;
  String? diamondCode;
  String? ean;
  String? issn;
  String? format;
  int? pageCount;
  String? textObjects;
  String? resourceURI;
  List<SomeRootEntityDataResultsUrls?>? urls;
  SomeRootEntityDataResultsSeries? series;
  List<SomeRootEntityDataResultsVariants?>? variants;
  String? collections;
  String? collectedIssues;
  List<SomeRootEntityDataResultsDates?>? dates;
  List<SomeRootEntityDataResultsPrices?>? prices;
  SomeRootEntityDataResultsThumbnail? thumbnail;
  String? images;
  SomeRootEntityDataResultsCreators? creators;
  SomeRootEntityDataResultsCharacters? characters;
  SomeRootEntityDataResultsStories? stories;
  SomeRootEntityDataResultsEvents? events;

  SomeRootEntityDataResults({
    this.id,
    this.digitalId,
    this.title,
    this.issueNumber,
    this.variantDescription,
    this.description,
    this.modified,
    this.isbn,
    this.upc,
    this.diamondCode,
    this.ean,
    this.issn,
    this.format,
    this.pageCount,
    this.textObjects,
    this.resourceURI,
    this.urls,
    this.series,
    this.variants,
    this.collections,
    this.collectedIssues,
    this.dates,
    this.prices,
    this.thumbnail,
    this.images,
    this.creators,
    this.characters,
    this.stories,
    this.events,
  });
  SomeRootEntityDataResults.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    digitalId = json['digitalId']?.toInt();
    title = json['title']?.toString();
    issueNumber = json['issueNumber']?.toInt();
    variantDescription = json['variantDescription']?.toString();
    description = json['description']?.toString();
    modified = json['modified']?.toString();
    isbn = json['isbn']?.toString();
    upc = json['upc']?.toString();
    diamondCode = json['diamondCode']?.toString();
    ean = json['ean']?.toString();
    issn = json['issn']?.toString();
    format = json['format']?.toString();
    pageCount = json['pageCount']?.toInt();
    textObjects = json['textObjects']?.toString();
    resourceURI = json['resourceURI']?.toString();
    if (json['urls'] != null) {
      final v = json['urls'];
      final arr0 = <SomeRootEntityDataResultsUrls>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResultsUrls.fromJson(v));
      });
      urls = arr0;
    }
    series = (json['series'] != null)
        ? SomeRootEntityDataResultsSeries.fromJson(json['series'])
        : null;
    if (json['variants'] != null) {
      final v = json['variants'];
      final arr0 = <SomeRootEntityDataResultsVariants>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResultsVariants.fromJson(v));
      });
      variants = arr0;
    }
    collections = json['collections']?.toString();
    collectedIssues = json['collectedIssues']?.toString();
    if (json['dates'] != null) {
      final v = json['dates'];
      final arr0 = <SomeRootEntityDataResultsDates>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResultsDates.fromJson(v));
      });
      dates = arr0;
    }
    if (json['prices'] != null) {
      final v = json['prices'];
      final arr0 = <SomeRootEntityDataResultsPrices>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResultsPrices.fromJson(v));
      });
      prices = arr0;
    }
    thumbnail = (json['thumbnail'] != null)
        ? SomeRootEntityDataResultsThumbnail.fromJson(json['thumbnail'])
        : null;
    images = json['images']?.toString();
    creators = (json['creators'] != null)
        ? SomeRootEntityDataResultsCreators.fromJson(json['creators'])
        : null;
    characters = (json['characters'] != null)
        ? SomeRootEntityDataResultsCharacters.fromJson(json['characters'])
        : null;
    stories = (json['stories'] != null)
        ? SomeRootEntityDataResultsStories.fromJson(json['stories'])
        : null;
    events = (json['events'] != null)
        ? SomeRootEntityDataResultsEvents.fromJson(json['events'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['digitalId'] = digitalId;
    data['title'] = title;
    data['issueNumber'] = issueNumber;
    data['variantDescription'] = variantDescription;
    data['description'] = description;
    data['modified'] = modified;
    data['isbn'] = isbn;
    data['upc'] = upc;
    data['diamondCode'] = diamondCode;
    data['ean'] = ean;
    data['issn'] = issn;
    data['format'] = format;
    data['pageCount'] = pageCount;
    data['textObjects'] = textObjects;
    data['resourceURI'] = resourceURI;
    if (urls != null) {
      final v = urls;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['urls'] = arr0;
    }
    if (series != null) {
      data['series'] = series!.toJson();
    }
    if (variants != null) {
      final v = variants;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['variants'] = arr0;
    }
    data['collections'] = collections;
    data['collectedIssues'] = collectedIssues;
    if (dates != null) {
      final v = dates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['dates'] = arr0;
    }
    if (prices != null) {
      final v = prices;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['prices'] = arr0;
    }
    if (thumbnail != null) {
      data['thumbnail'] = thumbnail!.toJson();
    }
    data['images'] = images;
    if (creators != null) {
      data['creators'] = creators!.toJson();
    }
    if (characters != null) {
      data['characters'] = characters!.toJson();
    }
    if (stories != null) {
      data['stories'] = stories!.toJson();
    }
    if (events != null) {
      data['events'] = events!.toJson();
    }
    return data;
  }
}

class SomeRootEntityData {
/*
{
  "offset": 0,
  "limit": 20,
  "total": 52402,
  "count": 20,
  "results": [
    {
      "id": 82967,
      "digitalId": 0,
      "title": "Marvel Previews (2017)",
      "issueNumber": 0,
      "variantDescription": "",
      "description": "",
      "modified": "2019-11-07T08:46:15-0500",
      "isbn": "",
      "upc": "75960608839302811",
      "diamondCode": "",
      "ean": "",
      "issn": "",
      "format": "",
      "pageCount": 112,
      "textObjects": "[]",
      "resourceURI": "http://gateway.marvel.com/v1/public/comics/82967",
      "urls": [
        {
          "type": "detail",
          "url": "http://marvel.com/comics/issue/82967/marvel_previews_2017?utm_campaign=apiRef&utm_source=edc015b686b72ca236f9a3a730613076"
        }
      ],
      "series": {
        "resourceURI": "http://gateway.marvel.com/v1/public/series/23665",
        "name": "Marvel Previews (2017 - Present)"
      },
      "variants": [
        {
          "resourceURI": "http://gateway.marvel.com/v1/public/comics/82965",
          "name": "Marvel Previews (2017)"
        }
      ],
      "collections": "[]",
      "collectedIssues": "[]",
      "dates": [
        {
          "type": "onsaleDate",
          "date": "2099-10-30T00:00:00-0500"
        }
      ],
      "prices": [
        {
          "type": "printPrice",
          "price": 0
        }
      ],
      "thumbnail": {
        "path": "http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available",
        "extension": "jpg"
      },
      "images": "[]",
      "creators": {
        "available": 1,
        "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/creators",
        "items": [
          {
            "resourceURI": "http://gateway.marvel.com/v1/public/creators/10021",
            "name": "Jim Nausedas",
            "role": "editor"
          }
        ],
        "returned": 1
      },
      "characters": {
        "available": 0,
        "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/characters",
        "items": "[]",
        "returned": 0
      },
      "stories": {
        "available": 2,
        "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/stories",
        "items": [
          {
            "resourceURI": "http://gateway.marvel.com/v1/public/stories/183698",
            "name": "cover from Marvel Previews (2017)",
            "type": "cover"
          }
        ],
        "returned": 2
      },
      "events": {
        "available": 0,
        "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/events",
        "items": " []",
        "returned": 0
      }
    }
  ]
} 
*/

  int? offset;
  int? limit;
  int? total;
  int? count;
  List<SomeRootEntityDataResults?>? results;

  SomeRootEntityData({
    this.offset,
    this.limit,
    this.total,
    this.count,
    this.results,
  });
  SomeRootEntityData.fromJson(Map<String, dynamic> json) {
    offset = json['offset']?.toInt();
    limit = json['limit']?.toInt();
    total = json['total']?.toInt();
    count = json['count']?.toInt();
    if (json['results'] != null) {
      final v = json['results'];
      final arr0 = <SomeRootEntityDataResults>[];
      v.forEach((v) {
        arr0.add(SomeRootEntityDataResults.fromJson(v));
      });
      results = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['offset'] = offset;
    data['limit'] = limit;
    data['total'] = total;
    data['count'] = count;
    if (results != null) {
      final v = results;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['results'] = arr0;
    }
    return data;
  }
}

class SomeRootEntity {
/*
{
  "code": 200,
  "status": "Ok",
  "copyright": "© 2022 MARVEL",
  "attributionText": "Data provided by Marvel. © 2022 MARVEL",
  "attributionHTML": "<a href=\"http://marvel.com\">Data provided by Marvel. © 2022 MARVEL</a>",
  "etag": "26f1baea964f4f21953fc6343c5e5c07bfbf93c5",
  "data": {
    "offset": 0,
    "limit": 20,
    "total": 52402,
    "count": 20,
    "results": [
      {
        "id": 82967,
        "digitalId": 0,
        "title": "Marvel Previews (2017)",
        "issueNumber": 0,
        "variantDescription": "",
        "description": "",
        "modified": "2019-11-07T08:46:15-0500",
        "isbn": "",
        "upc": "75960608839302811",
        "diamondCode": "",
        "ean": "",
        "issn": "",
        "format": "",
        "pageCount": 112,
        "textObjects": "[]",
        "resourceURI": "http://gateway.marvel.com/v1/public/comics/82967",
        "urls": [
          {
            "type": "detail",
            "url": "http://marvel.com/comics/issue/82967/marvel_previews_2017?utm_campaign=apiRef&utm_source=edc015b686b72ca236f9a3a730613076"
          }
        ],
        "series": {
          "resourceURI": "http://gateway.marvel.com/v1/public/series/23665",
          "name": "Marvel Previews (2017 - Present)"
        },
        "variants": [
          {
            "resourceURI": "http://gateway.marvel.com/v1/public/comics/82965",
            "name": "Marvel Previews (2017)"
          }
        ],
        "collections": "[]",
        "collectedIssues": "[]",
        "dates": [
          {
            "type": "onsaleDate",
            "date": "2099-10-30T00:00:00-0500"
          }
        ],
        "prices": [
          {
            "type": "printPrice",
            "price": 0
          }
        ],
        "thumbnail": {
          "path": "http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available",
          "extension": "jpg"
        },
        "images": "[]",
        "creators": {
          "available": 1,
          "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/creators",
          "items": [
            {
              "resourceURI": "http://gateway.marvel.com/v1/public/creators/10021",
              "name": "Jim Nausedas",
              "role": "editor"
            }
          ],
          "returned": 1
        },
        "characters": {
          "available": 0,
          "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/characters",
          "items": "[]",
          "returned": 0
        },
        "stories": {
          "available": 2,
          "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/stories",
          "items": [
            {
              "resourceURI": "http://gateway.marvel.com/v1/public/stories/183698",
              "name": "cover from Marvel Previews (2017)",
              "type": "cover"
            }
          ],
          "returned": 2
        },
        "events": {
          "available": 0,
          "collectionURI": "http://gateway.marvel.com/v1/public/comics/82967/events",
          "items": " []",
          "returned": 0
        }
      }
    ]
  }
} 
*/

  int? code;
  String? status;
  String? copyright;
  String? attributionText;
  String? attributionHTML;
  String? etag;
  SomeRootEntityData? data;

  SomeRootEntity({
    this.code,
    this.status,
    this.copyright,
    this.attributionText,
    this.attributionHTML,
    this.etag,
    this.data,
  });
  SomeRootEntity.fromJson(Map<String, dynamic> json) {
    code = json['code']?.toInt();
    status = json['status']?.toString();
    copyright = json['copyright']?.toString();
    attributionText = json['attributionText']?.toString();
    attributionHTML = json['attributionHTML']?.toString();
    etag = json['etag']?.toString();
    data = (json['data'] != null)
        ? SomeRootEntityData.fromJson(json['data'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['code'] = code;
    data['status'] = status;
    data['copyright'] = copyright;
    data['attributionText'] = attributionText;
    data['attributionHTML'] = attributionHTML;
    data['etag'] = etag;
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}
